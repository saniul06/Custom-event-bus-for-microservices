{"ast":null,"code":"var _jsxFileName = \"/media/sani/mix/Custom event bus for microservice/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PostCreate from './components/post/PostCreate';\nimport PostList from './components/post/PostList';\nimport CryptoJS from 'crypto-js';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [elem, setElem] = useState();\n  const [reload, setReload] = useState(false);\n  useEffect(() => {\n    setElem(document.querySelector('#park-pic'));\n    elem && elem.addEventListener(\"click\", function (e) {\n      toggleFullScreen();\n    }, false);\n  }, []);\n  useEffect(() => {\n    console.log('reload is', reload);\n  }, [reload]);\n  console.log('eeeeeeeeeeeeee', document.fullscreenElement);\n\n  function toggleFullScreen() {\n    if (!document.fullscreenElement) {\n      elem.requestFullscreen().catch(err => {\n        alert(`Error attempting to enable full-screen mode: ${err.message} (${err.name})`);\n      });\n    } else {\n      document.exitFullscreen();\n    }\n\n    console.log('docum', document.fullscreenElements);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Blog application\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PostCreate, {\n      setReload: setReload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PostList, {\n      setReload: setReload,\n      reload: reload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"park-pic\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            background: 'white'\n          },\n          children: \"this is a paragraph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleFullScreen,\n          children: \"click\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          width: '100px',\n          height: '100px'\n        },\n        children: \"floting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"X1XNMRnXZ/oBGolGXY4OOd9cYHE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/media/sani/mix/Custom event bus for microservice/client/src/App.js"],"names":["React","useState","useEffect","PostCreate","PostList","CryptoJS","App","elem","setElem","reload","setReload","document","querySelector","addEventListener","e","toggleFullScreen","console","log","fullscreenElement","requestFullscreen","catch","err","alert","message","name","exitFullscreen","fullscreenElements","background","width","height"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,EAAhC;AACA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,KAAD,CAApC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,OAAO,CAACG,QAAQ,CAACC,aAAT,CAAuB,WAAvB,CAAD,CAAP;AAGAL,IAAAA,IAAI,IAAIA,IAAI,CAACM,gBAAL,CAAsB,OAAtB,EAA+B,UAASC,CAAT,EAAY;AACjDC,MAAAA,gBAAgB;AACjB,KAFO,EAEL,KAFK,CAAR;AAGD,GAPQ,EAON,EAPM,CAAT;AASAb,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBR,MAAzB;AACD,GAFQ,EAEN,CAACA,MAAD,CAFM,CAAT;AAIAO,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BN,QAAQ,CAACO,iBAAvC;;AAEA,WAASH,gBAAT,GAA4B;AAE1B,QAAI,CAACJ,QAAQ,CAACO,iBAAd,EAAiC;AAC/BX,MAAAA,IAAI,CAACY,iBAAL,GAAyBC,KAAzB,CAA+BC,GAAG,IAAI;AACpCC,QAAAA,KAAK,CAAE,gDAA+CD,GAAG,CAACE,OAAQ,KAAIF,GAAG,CAACG,IAAK,GAA1E,CAAL;AACD,OAFD;AAGD,KAJD,MAIO;AACLb,MAAAA,QAAQ,CAACc,cAAT;AACD;;AACDT,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBN,QAAQ,CAACe,kBAA9B;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,UAAD;AAAY,MAAA,SAAS,EAAEhB;AAAvB;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,QAAD;AAAU,MAAA,SAAS,EAAEA,SAArB;AAAgC,MAAA,MAAM,EAAED;AAAxC;AAAA;AAAA;AAAA;AAAA,YAHF,eAKE;AAAK,MAAA,EAAE,EAAC,WAAR;AAAA,8BACE;AAAK,QAAA,EAAE,EAAC,UAAR;AAAA,gCACE;AAAG,UAAA,KAAK,EAAE;AAAEkB,YAAAA,UAAU,EAAE;AAAd,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAQ,UAAA,OAAO,EAAEZ,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAME;AAAQ,QAAA,KAAK,EAAE;AAAEa,UAAAA,KAAK,EAAE,OAAT;AAAkBC,UAAAA,MAAM,EAAE;AAA1B,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAhDD;;GAAMvB,G;;KAAAA,G;AAkDN,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport PostCreate from './components/post/PostCreate'\nimport PostList from './components/post/PostList'\nimport CryptoJS from 'crypto-js'\nimport './style.css'\n\nconst App = () => {\n  const [elem, setElem] = useState()\n  const [reload, setReload] = useState(false)\n  useEffect(() => {\n    setElem(document.querySelector('#park-pic'))\n\n\n    elem && elem.addEventListener(\"click\", function(e) {\n      toggleFullScreen();\n    }, false);\n  }, [])\n\n  useEffect(() => {\n    console.log('reload is', reload)\n  }, [reload])\n\n  console.log('eeeeeeeeeeeeee', document.fullscreenElement)\n\n  function toggleFullScreen() {\n\n    if (!document.fullscreenElement) {\n      elem.requestFullscreen().catch(err => {\n        alert(`Error attempting to enable full-screen mode: ${err.message} (${err.name})`);\n      });\n    } else {\n      document.exitFullscreen();\n    }\n    console.log('docum', document.fullscreenElements)\n  }\n\n  return (\n    <div className=\"container\">\n      <div>Blog application</div>\n      <PostCreate setReload={setReload} />\n      <PostList setReload={setReload} reload={reload} />\n\n      <div id=\"container\">\n        <div id=\"park-pic\">\n          <p style={{ background: 'white' }}>this is a paragraph</p>\n          <button onClick={toggleFullScreen}>click</button>\n        </div>\n\n        <button style={{ width: '100px', height: '100px' }}>floting</button>\n      </div>\n\n    </div>\n  )\n\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}